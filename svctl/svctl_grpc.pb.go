// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: svctl/svctl.proto

package svctl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServersClient is the client API for Servers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServersClient interface {
	Start(ctx context.Context, in *ServerOpts, opts ...grpc.CallOption) (*ServerInfo, error)
	Stop(ctx context.Context, in *ServerOpts, opts ...grpc.CallOption) (*ServerInfo, error)
	Register(ctx context.Context, in *ServerOpts, opts ...grpc.CallOption) (*ServerInfo, error)
}

type serversClient struct {
	cc grpc.ClientConnInterface
}

func NewServersClient(cc grpc.ClientConnInterface) ServersClient {
	return &serversClient{cc}
}

func (c *serversClient) Start(ctx context.Context, in *ServerOpts, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, "/svctl.Servers/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversClient) Stop(ctx context.Context, in *ServerOpts, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, "/svctl.Servers/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversClient) Register(ctx context.Context, in *ServerOpts, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, "/svctl.Servers/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServersServer is the server API for Servers service.
// All implementations must embed UnimplementedServersServer
// for forward compatibility
type ServersServer interface {
	Start(context.Context, *ServerOpts) (*ServerInfo, error)
	Stop(context.Context, *ServerOpts) (*ServerInfo, error)
	Register(context.Context, *ServerOpts) (*ServerInfo, error)
	mustEmbedUnimplementedServersServer()
}

// UnimplementedServersServer must be embedded to have forward compatible implementations.
type UnimplementedServersServer struct {
}

func (UnimplementedServersServer) Start(context.Context, *ServerOpts) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedServersServer) Stop(context.Context, *ServerOpts) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedServersServer) Register(context.Context, *ServerOpts) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedServersServer) mustEmbedUnimplementedServersServer() {}

// UnsafeServersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServersServer will
// result in compilation errors.
type UnsafeServersServer interface {
	mustEmbedUnimplementedServersServer()
}

func RegisterServersServer(s grpc.ServiceRegistrar, srv ServersServer) {
	s.RegisterService(&Servers_ServiceDesc, srv)
}

func _Servers_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svctl.Servers/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServer).Start(ctx, req.(*ServerOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servers_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svctl.Servers/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServer).Stop(ctx, req.(*ServerOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servers_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svctl.Servers/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServer).Register(ctx, req.(*ServerOpts))
	}
	return interceptor(ctx, in, info, handler)
}

// Servers_ServiceDesc is the grpc.ServiceDesc for Servers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Servers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svctl.Servers",
	HandlerType: (*ServersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Servers_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Servers_Stop_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Servers_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svctl/svctl.proto",
}
